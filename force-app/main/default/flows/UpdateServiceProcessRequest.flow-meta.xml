<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <actionCalls>
        <description>Calls an action that processes an asynchronous Apex request.</description>
        <name>MakeAsyncApexCall</name>
        <label>Make Async Apex Call</label>
        <locationX>325</locationX>
        <locationY>134</locationY>
        <actionName>industriesSendApexAsyncRequest</actionName>
        <actionType>industriesSendApexAsyncRequest</actionType>
        <connector>
            <targetReference>WaitForPlatformEvent</targetReference>
        </connector>
        <faultConnector>
            <isGoTo>true</isGoTo>
            <targetReference>SetAPIResponseValue</targetReference>
        </faultConnector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>RequestGuid</name>
            <value>
                <elementReference>$Flow.InterviewGuid</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>IntegrationDefinition</name>
            <value>
                <elementReference>IntegrationDefinitionDevName</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>InputRecordId</name>
            <value>
                <elementReference>RecordId</elementReference>
            </value>
        </inputParameters>
        <nameSegment>industriesSendApexAsyncRequest</nameSegment>
    </actionCalls>
    <actionCalls>
        <description>Send a Case closure status email to users.</description>
        <name>SendEmail</name>
        <label>Send Email</label>
        <locationX>72</locationX>
        <locationY>782</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>sendRichBody</name>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>relatedRecordId</name>
            <value>
                <elementReference>CaseId</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>recipientId</name>
            <value>
                <elementReference>PersonContactId</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailTemplateId</name>
            <value>
                <elementReference>EmailTemplateId</elementReference>
            </value>
        </inputParameters>
        <nameSegment>emailSimple</nameSegment>
    </actionCalls>
    <apiVersion>58.0</apiVersion>
    <areMetricsLoggedToDataCloud>false</areMetricsLoggedToDataCloud>
    <assignments>
        <description>Sets the API response value if the API call has failed.</description>
        <name>SetAPIResponseValue</name>
        <label>Set API Response Value</label>
        <locationX>325</locationX>
        <locationY>1250</locationY>
        <assignmentItems>
            <assignToReference>AsyncCalloutFailed</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>Status</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue>The Service Request failed</stringValue>
            </value>
        </assignmentItems>
    </assignments>
    <decisions>
        <description>Determines whether the HasActionFailed formula evaluates to true.</description>
        <name>DidActionFail</name>
        <label>Did Action Fail?</label>
        <locationX>50</locationX>
        <locationY>350</locationY>
        <defaultConnector>
            <targetReference>UpdateCase</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No (Default)</defaultConnectorLabel>
        <rules>
            <name>Yes</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>HasActionFailed</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SetAPIResponseValue</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines whether the email associated with the Account is available or not.</description>
        <name>IsAccountEmailAvailable</name>
        <label>Is Account Email Available?</label>
        <locationX>204</locationX>
        <locationY>566</locationY>
        <defaultConnectorLabel>AccountEmailNotAvailable (Default)</defaultConnectorLabel>
        <rules>
            <name>AccountEmailAvailable</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>AccountEmail</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <stringValue></stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>AccountEmail</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <stringValue>N/A</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>AccountEmail</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>GetEmailTemplate</targetReference>
            </connector>
            <label>Account Email Available</label>
        </rules>
    </decisions>
    <description>Calls an asynchronous Apex action to update a service catalog request record corresponding to a service process request.</description>
    <environments>Default</environments>
    <formulas>
        <description>Evaluates to true if the asynchronous request response event record&apos;s response payload isn&apos;t &quot;issuccess&quot;.</description>
        <name>HasActionFailed</name>
        <dataType>Boolean</dataType>
        <expression>REGEX({!PlatformEventResponse.ResponsePayload}, &apos;(?i).*&quot;issuccess&quot;\\s*:\\s*false.*&apos;)</expression>
    </formulas>
    <interviewLabel>Update Service Process Request {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Update Service Process Request</label>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>AutoLaunchedFlow</processType>
    <recordLookups>
        <description>Gets the template for the email that is sent to users about the case notification.</description>
        <name>GetEmailTemplate</name>
        <label>Get Email Template ID</label>
        <locationX>72</locationX>
        <locationY>674</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>SendEmail</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>DeveloperName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>CaseClosureEmailTemplate</stringValue>
            </value>
        </filters>
        <object>EmailTemplate</object>
        <outputAssignments>
            <assignToReference>EmailTemplateId</assignToReference>
            <field>Id</field>
        </outputAssignments>
    </recordLookups>
    <recordUpdates>
        <description>Updates the Status field to Closed for the case passed into the flow.</description>
        <name>UpdateCase</name>
        <label>Update Case</label>
        <locationX>204</locationX>
        <locationY>458</locationY>
        <connector>
            <targetReference>IsAccountEmailAvailable</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>CaseId</elementReference>
            </value>
        </filters>
        <inputAssignments>
            <field>Status</field>
            <value>
                <stringValue>Closed</stringValue>
            </value>
        </inputAssignments>
        <object>Case</object>
    </recordUpdates>
    <runInMode>DefaultMode</runInMode>
    <start>
        <locationX>199</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>MakeAsyncApexCall</targetReference>
        </connector>
    </start>
    <status>Active</status>
    <variables>
        <description>Stores the email associated with the Account.</description>
        <name>AccountEmail</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
        <value>
            <stringValue>N/A</stringValue>
        </value>
    </variables>
    <variables>
        <description>Stores the Boolean value identifying if the MakeAsyncApexCall action failed. Available as output from the flow.</description>
        <name>AsyncCalloutFailed</name>
        <dataType>Boolean</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>true</isOutput>
    </variables>
    <variables>
        <description>Stores the Case ID.</description>
        <name>CaseId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <description>Stores the email template ID.</description>
        <name>EmailTemplateId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <description>Stores the dev name of the integration definition to use for the Apex asynchronous request. To use a different 
integration definition, change this to the dev name of the integration definition to use for the request.</description>
        <name>IntegrationDefinitionDevName</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
        <value>
            <stringValue>N/A</stringValue>
        </value>
    </variables>
    <variables>
        <name>PersonContactId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
        <value>
            <stringValue>N/A</stringValue>
        </value>
    </variables>
    <variables>
        <description>Stores the response from the asynchronous request response event with a request GUID that matches the interview GUID for the flow currently running.</description>
        <name>PlatformEventResponse</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>AsyncRequestResponseEvent</objectType>
    </variables>
    <variables>
        <description>Stores the ID of the service catalog request record passed into the flow.</description>
        <name>RecordId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>true</isOutput>
    </variables>
    <variables>
        <description>Stores the status of update Service Process request</description>
        <name>Status</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>true</isOutput>
    </variables>
    <waits>
        <description>Pauses the flow until it receives an asynchronous request response event with a request GUID that matches the interview GUID for the flow currently running. Stores the event payload in the PlatformEventResponse record variable.</description>
        <name>WaitForPlatformEvent</name>
        <label>Wait for Platform Event</label>
        <locationX>325</locationX>
        <locationY>242</locationY>
        <defaultConnector>
            <targetReference>SetAPIResponseValue</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No Event Received (Default)</defaultConnectorLabel>
        <waitEvents>
            <name>PlatformEventReceived</name>
            <conditionLogic>and</conditionLogic>
            <connector>
                <targetReference>DidActionFail</targetReference>
            </connector>
            <eventType>AsyncRequestResponseEvent</eventType>
            <inputParameters>
                <name>RequestGuid</name>
                <value>
                    <elementReference>$Flow.InterviewGuid</elementReference>
                </value>
            </inputParameters>
            <label>Platform Event Received</label>
            <outputParameters>
                <assignToReference>PlatformEventResponse</assignToReference>
                <name>AsyncRequestResponseEvent</name>
            </outputParameters>
        </waitEvents>
    </waits>
</Flow>
