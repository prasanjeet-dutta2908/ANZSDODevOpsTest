<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>59.0</apiVersion>
    <areMetricsLoggedToDataCloud>false</areMetricsLoggedToDataCloud>
    <constants>
        <name>ViaPostValue</name>
        <dataType>String</dataType>
        <value>
            <stringValue>No</stringValue>
        </value>
    </constants>
    <decisions>
        <description>Determines the status of the loan payoff statement request.</description>
        <name>CheckCaseStatus</name>
        <label>Check Case Status</label>
        <locationX>226</locationX>
        <locationY>287</locationY>
        <defaultConnector>
            <targetReference>ProcessLoanPayoffStatementRequest</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Case is not Closed</defaultConnectorLabel>
        <rules>
            <name>isClosed</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Case.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Closed</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>PerformLoanPayoffStatementRequestUpdateandPostUpdateActions</targetReference>
            </connector>
            <label>Case is Closed</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determines if the user has selected to receive the statement via post.</description>
        <name>ReceiveStatementViaPost</name>
        <label>Receive Statement Via Post?</label>
        <locationX>402</locationX>
        <locationY>503</locationY>
        <defaultConnector>
            <targetReference>PerformAddressVerificationforRequestLoanPayoffStatement</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Via Post is checked</defaultConnectorLabel>
        <rules>
            <name>ViaPostIsUnchecked</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>ReviewLoanPayoffStatementRequest.Outputs.ViaPost</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>ViaPostValue</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>PerformLoanPayoffStatementRequestandPostUpdateActions</targetReference>
            </connector>
            <label>Via Post Is Unchecked</label>
        </rules>
    </decisions>
    <description>Allows a case owner to review the request for loan payoff statement, submits the change, and either updates the case record or notifies the case owner that the update failed.</description>
    <environments>Default</environments>
    <interviewLabel>Process Loan Payoff Statement Request {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Process Loan Payoff Statement Request</label>
    <orchestratedStages>
        <description>Verifies the address for Loan Payoff Statement Request</description>
        <name>PerformAddressVerificationforRequestLoanPayoffStatement</name>
        <label>Perform Address Verification for Loan Payoff Statement Request</label>
        <locationX>490</locationX>
        <locationY>611</locationY>
        <connector>
            <targetReference>PerformLoanPayoffStatementRequestandPostUpdateActions</targetReference>
        </connector>
        <exitConditionLogic>and</exitConditionLogic>
        <stageSteps>
            <description>Allows a case owner to review the address details for a loan payoff statement request.</description>
            <name>ReviewAddressDetailsforLoanPayoffStatementRequest</name>
            <actionName>ReviewRequestLoanPayoffAddressDetails</actionName>
            <actionType>stepInteractive</actionType>
            <assignees>
                <assignee>
                    <elementReference>$Record.Case.Owner:User.Username</elementReference>
                </assignee>
                <assigneeType>User</assigneeType>
            </assignees>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>AccountName</name>
                <value>
                    <elementReference>ReviewLoanPayoffStatementRequest.Outputs.AccountName</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>AddressLine1</name>
                <value>
                    <elementReference>ReviewLoanPayoffStatementRequest.Outputs.AddressLine1</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>AddressLine2</name>
                <value>
                    <elementReference>ReviewLoanPayoffStatementRequest.Outputs.AddressLine2</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>CaseId</name>
                <value>
                    <elementReference>ReviewLoanPayoffStatementRequest.Outputs.CaseId</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>City</name>
                <value>
                    <elementReference>ReviewLoanPayoffStatementRequest.Outputs.City</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>Country</name>
                <value>
                    <elementReference>ReviewLoanPayoffStatementRequest.Outputs.Country</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>PostalCode</name>
                <value>
                    <elementReference>ReviewLoanPayoffStatementRequest.Outputs.PostalCode</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>State</name>
                <value>
                    <elementReference>ReviewLoanPayoffStatementRequest.Outputs.State</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>ActionInput__RecordId</name>
                <value>
                    <elementReference>$Record.CaseId</elementReference>
                </value>
            </inputParameters>
            <label>Review Address Details for Loan Payoff Statement Request</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>false</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>InteractiveStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <orchestratedStages>
        <description>Send a loan payoff statement request and update the case status.</description>
        <name>PerformLoanPayoffStatementRequestandPostUpdateActions</name>
        <label>Perform Loan Payoff Statement Request and Post-Update Actions</label>
        <locationX>402</locationX>
        <locationY>803</locationY>
        <exitConditionLogic>and</exitConditionLogic>
        <stageSteps>
            <description>Calls an asynchronous Apex action to update a service catalog request record for loan payoff statement request. Updates a specified case&apos;s status to closed if a loan payoff statement request update was successful. Otherwise, displays an error to the flow user.</description>
            <name>AttemptLoanPayoffStatementRequestUpdateandDisplayCaseStatus</name>
            <actionName>UpdateCaseForTheLoanPayoffStatement</actionName>
            <actionType>stepBackground</actionType>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>AccountEmail</name>
                <value>
                    <elementReference>ReviewLoanPayoffStatementRequest.Outputs.AccountEmail</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>AccountName</name>
                <value>
                    <elementReference>ReviewLoanPayoffStatementRequest.Outputs.AccountName</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>CaseNumber</name>
                <value>
                    <elementReference>ReviewLoanPayoffStatementRequest.Outputs.CaseNumber</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>EmailWithAttachmentStatus</name>
                <value>
                    <elementReference>ReviewLoanPayoffStatementRequest.Outputs.EmailWithAttachmentStatus</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>PersonContactId</name>
                <value>
                    <elementReference>ReviewLoanPayoffStatementRequest.Outputs.PersonContactId</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>RecordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>ViaEmail</name>
                <value>
                    <elementReference>ReviewLoanPayoffStatementRequest.Outputs.ViaEmail</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>caseId</name>
                <value>
                    <elementReference>$Record.CaseId</elementReference>
                </value>
            </inputParameters>
            <label>Attempt Loan Payoff Statement Request Update and Display Case Status</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>false</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <orchestratedStages>
        <description>Update the request for loan payoff statement, send an email to the customer, and update the case status.</description>
        <name>PerformLoanPayoffStatementRequestUpdateandPostUpdateActions</name>
        <label>Perform Loan Payoff Statement Request Update and Post-Update Actions</label>
        <locationX>50</locationX>
        <locationY>395</locationY>
        <exitConditionLogic>and</exitConditionLogic>
        <stageSteps>
            <description>Calls an asynchronous Apex action to update a service catalog request record for a request to loan payoff statement. Updates a specified case&apos;s status to closed if the request to loan payoff statement was updated. Otherwise, displays an error to the flow user.</description>
            <name>AttemptLoanPayoffStatementRequestandDisplayCaseStatus</name>
            <actionName>UpdateCaseForTheLoanPayoffStatement</actionName>
            <actionType>stepBackground</actionType>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>AccountEmail</name>
                <value>
                    <elementReference>$Record.Case.Account.PersonEmail</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>AccountName</name>
                <value>
                    <elementReference>$Record.Case.Account.Name</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>CaseNumber</name>
                <value>
                    <elementReference>$Record.Case.CaseNumber</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>PersonContactId</name>
                <value>
                    <elementReference>$Record.Case.Account.PersonContact.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>RecordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>caseId</name>
                <value>
                    <elementReference>$Record.CaseId</elementReference>
                </value>
            </inputParameters>
            <label>Attempt Loan Payoff Statement Request and Display Case Status</label>
            <requiresAsyncProcessing>false</requiresAsyncProcessing>
            <runAsUser>false</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <orchestratedStages>
        <description>Processes a loan payoff statement request update for a service catalog request.</description>
        <name>ProcessLoanPayoffStatementRequest</name>
        <label>Process Loan Payoff Statement Request</label>
        <locationX>402</locationX>
        <locationY>395</locationY>
        <connector>
            <targetReference>ReceiveStatementViaPost</targetReference>
        </connector>
        <exitConditionLogic>and</exitConditionLogic>
        <stageSteps>
            <description>Allows a case owner to review details and sends an email to the customer who raised a  loan payoff statement request.</description>
            <name>ReviewLoanPayoffStatementRequest</name>
            <actionName>ReviewLoanPayoffStatementRequest</actionName>
            <actionType>stepBackground</actionType>
            <canAssigneeEdit>false</canAssigneeEdit>
            <debugSimulateStep>false</debugSimulateStep>
            <entryConditionLogic>and</entryConditionLogic>
            <exitConditionLogic>and</exitConditionLogic>
            <inputParameters>
                <name>CaseId</name>
                <value>
                    <elementReference>$Record.CaseId</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>InputRecordId</name>
                <value>
                    <elementReference>$Record.Id</elementReference>
                </value>
            </inputParameters>
            <label>Review Loan Payoff Statement Request</label>
            <requiresAsyncProcessing>true</requiresAsyncProcessing>
            <runAsUser>false</runAsUser>
            <shouldLock>false</shouldLock>
            <stepSubtype>BackgroundStep</stepSubtype>
        </stageSteps>
    </orchestratedStages>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>Orchestrator</processType>
    <start>
        <locationX>100</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>CheckCaseStatus</targetReference>
        </connector>
        <filterFormula>{!$Record.SvcCatalogItemDefinition.DeveloperName}=&apos;RequestLoanPayoffStatements&apos;</filterFormula>
        <object>SvcCatalogRequest</object>
        <recordTriggerType>Create</recordTriggerType>
        <triggerType>RecordAfterSave</triggerType>
    </start>
    <status>Active</status>
    <variables>
        <name>test</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
</Flow>
